variables = "character",
parameter_units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = parameters, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
parameter_units
parameter_units <<- list("air_temperature" = "K",  "relative_humidity" = "%", "precipitation" = "mm",
"surface_downwelling_shortwave_flux_in_air" = "W m-2", "eastward_wind" = "m s-1",
"northward_wind" = "m s-1", "specific_humidity" = "kg kg-1")
scale_factors <<- list("air_temperature" = 0.1,  "relative_humidity" = 1.0, "precipitation" = 0.1,
"surface_downwelling_shortwave_flux_in_air" = 1,  "eastward_wind" = 0.1,
"northward_wind" = 0.1, "specific_humidity" = 0.00001)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
parameters = "character",
scenarios = "character",
variables = "character",
parameter_units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = parameters, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
parameters = "character",
scenarios = "character",
variables = "character",
parameter_units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = parameters, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
# units <<- units
# scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
MyClass <- setRefClass(
"MyClass",
fields = list(
x = "ANY",
y = "numeric",
z = "character"
),
methods = list(
initialize = function(x = c(1, 2), y = 1:10, z = letters)
{
"This method is called when you create an instance of the class."
x <<- x
y <<- y
z <<- z
print("You initialized MyClass!")
},
hello = function()
{
"This method returns the string 'hello'."
"hello"
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
}
)
)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
parameters = "character",
scenarios = "character",
variables = "character",
parameter_units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = parameters, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
# units <<- units
# scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
models <- c("bcc-csm1-1", "bcc-csm1-1-m", "BNU-ESM", "CanESM2", "CCSM4", "CNRM-CM5", "CSIRO-Mk3-6-0",
"GFDL-ESM2M", "GFDL-ESM2G", "HadGEM2-ES365", "HadGEM2-CC365", "inmcm4", "IPSL-CM5A-LR",
"IPSL-CM5A-MR", "IPSL-CM5B-LR", "MIROC5", "MIROC-ESM", "MIROC-ESM-CHEM", "MRI-CGCM3",
"NorESM1-M")
params <- c("tasmin", "tasmax", "rhsmin", "rhsmax", "pr", "rsds", "uas", "vas", "huss")
scenarios <- c("rcp45", "rcp85")
variables <- list("tasmin" = "air_temperature",
"tasmax" = "air_temperature",
"rhsmin" = "relative_humidity",
"rhsmax" = "relative_humidity",
"pr" = "precipitation",
"rsds" = "surface_downwelling_shortwave_flux_in_air",
"uas" = "eastward_wind",
"vas" = "northward_wind",
"huss" = "specific_humidity")
scale_factors <<- list("air_temperature" = 0.1,  "relative_humidity" = 1.0, "precipitation" = 0.1,
"surface_downwelling_shortwave_flux_in_air" = 1,  "eastward_wind" = 0.1,
"northward_wind" = 0.1, "specific_humidity" = 0.00001)
scale_factors <- list("air_temperature" = 0.1,  "relative_humidity" = 1.0, "precipitation" = 0.1,
"surface_downwelling_shortwave_flux_in_air" = 1,  "eastward_wind" = 0.1,
"northward_wind" = 0.1, "specific_humidity" = 0.00001)
parameter_units <- list("air_temperature" = "K",  "relative_humidity" = "%", "precipitation" = "mm",
"surface_downwelling_shortwave_flux_in_air" = "W m-2", "eastward_wind" = "m s-1",
"northward_wind" = "m s-1", "specific_humidity" = "kg kg-1")
scale_factors <- list("air_temperature" = 0.1,  "relative_humidity" = 1.0, "precipitation" = 0.1,
"surface_downwelling_shortwave_flux_in_air" = 1,  "eastward_wind" = 0.1,
"northward_wind" = 0.1, "specific_humidity" = 0.00001)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
parameters = "character",
scenarios = "character",
variables = "character",
parameter_units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = parameters, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
# units <<- units
# scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
parameters = "character",
scenarios = "character",
variables = "character",
parameter_units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = parameters, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
# params <<- params
scenarios <<- scenarios
variables <<- variables
# units <<- units
# scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
arguments
args = arguments$new()
q
arguments
arguments$arguments()
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
parameters = "character",
scenarios = "character",
variables = "character",
parameter_units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = params, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
# params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
params = "character",
scenarios = "character",
variables = "character",
units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = params, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
# params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
args = arguments$new()
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
params = "character",
scenarios = "character",
variables = "character",
units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = params, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
args = arguments$new()
args
test = arguments$new()
test
q
q
q
qq
thing
thing = arguments$new()
thing
models <- c("bcc-csm1-1", "bcc-csm1-1-m", "BNU-ESM", "CanESM2", "CCSM4", "CNRM-CM5", "CSIRO-Mk3-6-0",
"GFDL-ESM2M", "GFDL-ESM2G", "HadGEM2-ES365", "HadGEM2-CC365", "inmcm4", "IPSL-CM5A-LR",
"IPSL-CM5A-MR", "IPSL-CM5B-LR", "MIROC5", "MIROC-ESM", "MIROC-ESM-CHEM", "MRI-CGCM3",
"NorESM1-M")
params <- c("tasmin", "tasmax", "rhsmin", "rhsmax", "pr", "rsds", "uas", "vas", "huss")
scenarios <- c("rcp45", "rcp85")
variables <- list("tasmin" = "air_temperature",
"tasmax" = "air_temperature",
"rhsmin" = "relative_humidity",
"rhsmax" = "relative_humidity",
"pr" = "precipitation",
"rsds" = "surface_downwelling_shortwave_flux_in_air",
"uas" = "eastward_wind",
"vas" = "northward_wind",
"huss" = "specific_humidity")
parameter_units <- list("air_temperature" = "K",  "relative_humidity" = "%", "precipitation" = "mm",
"surface_downwelling_shortwave_flux_in_air" = "W m-2", "eastward_wind" = "m s-1",
"northward_wind" = "m s-1", "specific_humidity" = "kg kg-1")
scale_factors <- list("air_temperature" = 0.1,  "relative_humidity" = 1.0, "precipitation" = 0.1,
"surface_downwelling_shortwave_flux_in_air" = 1,  "eastward_wind" = 0.1,
"northward_wind" = 0.1, "specific_humidity" = 0.00001)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
params = "character",
scenarios = "character",
variables = "character",
units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models, params = params, scenarios = scenarios,
variables = variables, units = parameter_units, scale_factors = scale_factors) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
ob = arguments$new()
models1 <- c("bcc-csm1-1", "bcc-csm1-1-m", "BNU-ESM", "CanESM2", "CCSM4", "CNRM-CM5", "CSIRO-Mk3-6-0",
"GFDL-ESM2M", "GFDL-ESM2G", "HadGEM2-ES365", "HadGEM2-CC365", "inmcm4", "IPSL-CM5A-LR",
"IPSL-CM5A-MR", "IPSL-CM5B-LR", "MIROC5", "MIROC-ESM", "MIROC-ESM-CHEM", "MRI-CGCM3",
"NorESM1-M")
params1 <- c("tasmin", "tasmax", "rhsmin", "rhsmax", "pr", "rsds", "uas", "vas", "huss")
scenarios1 <- c("rcp45", "rcp85")
variables1 <- list("tasmin" = "air_temperature",
"tasmax" = "air_temperature",
"rhsmin" = "relative_humidity",
"rhsmax" = "relative_humidity",
"pr" = "precipitation",
"rsds" = "surface_downwelling_shortwave_flux_in_air",
"uas" = "eastward_wind",
"vas" = "northward_wind",
"huss" = "specific_humidity")
Q
models1 <- c("bcc-csm1-1", "bcc-csm1-1-m", "BNU-ESM", "CanESM2", "CCSM4", "CNRM-CM5", "CSIRO-Mk3-6-0",
"GFDL-ESM2M", "GFDL-ESM2G", "HadGEM2-ES365", "HadGEM2-CC365", "inmcm4", "IPSL-CM5A-LR",
"IPSL-CM5A-MR", "IPSL-CM5B-LR", "MIROC5", "MIROC-ESM", "MIROC-ESM-CHEM", "MRI-CGCM3",
"NorESM1-M")
params1 <- c("tasmin", "tasmax", "rhsmin", "rhsmax", "pr", "rsds", "uas", "vas", "huss")
scenarios1 <- c("rcp45", "rcp85")
variables1 <- list("tasmin" = "air_temperature",
"tasmax" = "air_temperature",
"rhsmin" = "relative_humidity",
"rhsmax" = "relative_humidity",
"pr" = "precipitation",
"rsds" = "surface_downwelling_shortwave_flux_in_air",
"uas" = "eastward_wind",
"vas" = "northward_wind",
"huss" = "specific_humidity")
models1 <- c("bcc-csm1-1", "bcc-csm1-1-m", "BNU-ESM", "CanESM2", "CCSM4", "CNRM-CM5", "CSIRO-Mk3-6-0",
"GFDL-ESM2M", "GFDL-ESM2G", "HadGEM2-ES365", "HadGEM2-CC365", "inmcm4", "IPSL-CM5A-LR",
"IPSL-CM5A-MR", "IPSL-CM5B-LR", "MIROC5", "MIROC-ESM", "MIROC-ESM-CHEM", "MRI-CGCM3",
"NorESM1-M")
params1 <- c("tasmin", "tasmax", "rhsmin", "rhsmax", "pr", "rsds", "uas", "vas", "huss")
scenarios1 <- c("rcp45", "rcp85")
variables1 <- list("tasmin" = "air_temperature",
"tasmax" = "air_temperature",
"rhsmin" = "relative_humidity",
"rhsmax" = "relative_humidity",
"pr" = "precipitation",
"rsds" = "surface_downwelling_shortwave_flux_in_air",
"uas" = "eastward_wind",
"vas" = "northward_wind",
"huss" = "specific_humidity")
units1 <- list("air_temperature" = "K",  "relative_humidity" = "%", "precipitation" = "mm",
"surface_downwelling_shortwave_flux_in_air" = "W m-2", "eastward_wind" = "m s-1",
"northward_wind" = "m s-1", "specific_humidity" = "kg kg-1")
scale_factors1 <- list("air_temperature" = 0.1,  "relative_humidity" = 1.0, "precipitation" = 0.1,
"surface_downwelling_shortwave_flux_in_air" = 1,  "eastward_wind" = 0.1,
"northward_wind" = 0.1, "specific_humidity" = 0.00001)
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
params = "character",
scenarios = "character",
variables = "character",
units = "character",
scale_factors = "numeric"),
methods = list(
initialize = function(models = models1, params = params1, scenarios = scenarios1,
variables = variables1, units = units1, scale_factors = scale_factors1) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
scale_factors <<- scale_factors
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
ob = arguments$new()
variables1
c("thing" = 'Thing2')
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
params = "character",
scenarios = "character",
variables = "character",
units = "character"),
methods = list(
initialize = function(models = models1, params = params1, scenarios = scenarios1,
variables = variables1, units = units1) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
ob = arguments$new()
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
params = "character",
scenarios = "character",
variables = "character",
units = "character"),
methods = list(
initialize = function(models = models1, params = params1, scenarios = scenarios1,
variables = variables1, units = units1) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
ob = arguments$new()
# Something like a python class structure?
arguments <- setRefClass(
"maca_parameters",
fields = list(
models = "character",
params = "character",
scenarios = "character",
variables = "list",
units = "list"),
methods = list(
initialize = function(models = models1, params = params1, scenarios = scenarios1,
variables = variables1, units = units1) {
models <<- models
params <<- params
scenarios <<- scenarios
variables <<- variables
units <<- units
},
arguments = function(model){
print("ARGUMENTS!")
}
)
)
ob = arguments$new()
ob
library(rgdal)
install.packages('rgdal')
library(sf)
install.packages(sf)
install.packages('sf')
install.packages('sf')
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
install.packages('rgdal')
install.packages('rgdal')
